package fbox;

import com.sun.net.httpserver.*;
import java.awt.AWTException;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Robot;
import java.awt.event.*;
import java.io.IOException;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.sql.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Timer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.table.DefaultTableModel;
import org.apache.hc.client5.http.classic.methods.HttpGet;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.core5.http.ParseException;
import org.apache.hc.core5.http.io.entity.EntityUtils;

/**
 *
 * @author kuncahyoadi
 */
public class Main extends javax.swing.JFrame {

    public Statement st;
    public ResultSet rs;
    int userID;
    Connection con = koneksi.ConfigDB.conect();

    DefaultTableModel model = new DefaultTableModel();
    String url, Progress = "";
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
    Robot robot; // Inisialisasi objek Robot di luar metode initComponents
    HttpServer server; // Instansi HttpServer
    private boolean statusPasswordInput = false;
    private String api_f; // Variabel untuk menyimpan nilai "api_f"

    /**
     * Creates new form main_GUI
     */
    public Main(int userID) {
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        this.userID = userID;
        String deviceName = checkAndSaveDeviceIdentity(); // Mendapatkan deviceName dari metode Anda
        this.api_f = ambilApiFDariDatabase(this.userID, deviceName);
        System.out.println("id=" + this.userID);
        checkAndSaveDeviceIdentity();
        setBackgroundImage(); // Memanggil method untuk mengatur gambar latar belakang
        initComponents();
        Object[] kolom = {"versi", "perintah", "hasil"};
        model.setColumnIdentifiers(kolom);
//        cek.setText(""+this.userID);
    }

    public void setBackgroundImage() {
        // Buat ImageIcon dari gambar GIF
        ImageIcon gifIcon = new ImageIcon(getClass().getResource("/icon/phomoriaIcon/vchr.jpg"));

        // Dapatkan gambar dari ImageIcon
        Image gifImage = gifIcon.getImage();

        // Set latar belakang JFrame dengan gambar GIF
        setContentPane(new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.drawImage(gifImage, 0, 0, getWidth(), getHeight(), this);
            }
        });
    }

    private void clear() {
        tf_vc.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSeparator1 = new javax.swing.JSeparator();
        header = new javax.swing.JPanel();
        iconClose = new javax.swing.JPanel();
        icClose = new javax.swing.JLabel();
        iconMax = new javax.swing.JPanel();
        icMax = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        tf_vc = new javax.swing.JTextField();
        bt_vcImage = new javax.swing.JLabel();
        bt_back = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        header.setBackground(new java.awt.Color(0, 0, 0));
        header.setPreferredSize(new java.awt.Dimension(800, 50));

        iconClose.setBackground(new java.awt.Color(0, 0, 0));
        iconClose.setPreferredSize(new java.awt.Dimension(50, 50));
        iconClose.setLayout(new java.awt.BorderLayout());

        icClose.setBackground(new java.awt.Color(51, 102, 255));
        icClose.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        icClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/delete_32px.png"))); // NOI18N
        icClose.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        icClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                icCloseMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                icCloseMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                icCloseMouseExited(evt);
            }
        });
        iconClose.add(icClose, java.awt.BorderLayout.CENTER);

        iconMax.setBackground(new java.awt.Color(0, 0, 0));
        iconMax.setPreferredSize(new java.awt.Dimension(50, 50));
        iconMax.setLayout(new java.awt.BorderLayout());

        icMax.setBackground(new java.awt.Color(51, 102, 255));
        icMax.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        icMax.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/full_screen_32px.png"))); // NOI18N
        icMax.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                icMaxMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                icMaxMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                icMaxMouseExited(evt);
            }
        });
        iconMax.add(icMax, java.awt.BorderLayout.CENTER);

        jLabel1.setFont(new java.awt.Font("Circular Std Black", 0, 64)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/PHOMORIA21.png"))); // NOI18N

        jLabel4.setFont(new java.awt.Font("Circular Std Black", 0, 30)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Phomoria");

        javax.swing.GroupLayout headerLayout = new javax.swing.GroupLayout(header);
        header.setLayout(headerLayout);
        headerLayout.setHorizontalGroup(
            headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(iconMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(iconClose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        headerLayout.setVerticalGroup(
            headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iconClose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iconMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        tf_vc.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        tf_vc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tf_vc.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 255), new java.awt.Color(102, 102, 102), new java.awt.Color(51, 51, 51)));
        tf_vc.setMinimumSize(new java.awt.Dimension(29, 18));
        tf_vc.setPreferredSize(new java.awt.Dimension(29, 18));
        tf_vc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_vcActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 511;
        gridBagConstraints.ipady = 32;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(62, 336, 0, 328);
        jPanel1.add(tf_vc, gridBagConstraints);

        bt_vcImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/phomoriaIcon/start.png"))); // NOI18N
        bt_vcImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_vcImageMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(28, 430, 8, 0);
        jPanel1.add(bt_vcImage, gridBagConstraints);

        bt_back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/phomoriaIcon/back button.png"))); // NOI18N
        bt_back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_backMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(header, javax.swing.GroupLayout.DEFAULT_SIZE, 1204, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(bt_back)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(header, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addComponent(bt_back)
                .addGap(203, 203, 203)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(1204, 668));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
private String checkAndSaveDeviceIdentity() {
        String deviceName = "";
        try {
            InetAddress localhost = InetAddress.getLocalHost();
            deviceName = localhost.getHostName();

            if (!isDeviceNameExists(deviceName)) {
                saveDeviceNameToDatabase(deviceName);
                System.out.println(deviceName + "kosong");
            } else {
                System.out.println(deviceName + "ada");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return deviceName;
    }

    private boolean isDeviceNameExists(String deviceName) {
        try {
            Connection con = koneksi.ConfigDB.conect();
            PreparedStatement stmt = con.prepareStatement("SELECT COUNT(*) AS count FROM device WHERE name_device = ? AND id_users = " + this.userID);
            stmt.setString(1, deviceName);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                int count = rs.getInt("count");
                return count > 0;
            }

            rs.close();
            stmt.close();
            con.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    private void saveDeviceNameToDatabase(String deviceName) {
        try {
            Connection conn = koneksi.ConfigDB.conect();
            PreparedStatement stmt = conn.prepareStatement("INSERT INTO device (name_device ,id_users,port_device,qr_device1,qr_device2) VALUES (?," + this.userID + ",8000,'','')");
            stmt.setString(1, deviceName);
            stmt.executeUpdate();

            stmt.close();
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void changeColor(JPanel hover, Color rand) {
        hover.setBackground(rand);

    }
    private void tf_vcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_vcActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_vcActionPerformed

    private void icMaxMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_icMaxMouseExited
        changeColor(iconMax, new Color(0, 0, 0));
    }//GEN-LAST:event_icMaxMouseExited

    private void icMaxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_icMaxMouseEntered
        changeColor(iconMax, new Color(240, 240, 240));
    }//GEN-LAST:event_icMaxMouseEntered

    private void icMaxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_icMaxMouseClicked
        if (!statusPasswordInput) {
            showPasswordInput();
        }
    }//GEN-LAST:event_icMaxMouseClicked

    private void icCloseMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_icCloseMouseExited
        changeColor(iconClose, new Color(0, 0, 0));
    }//GEN-LAST:event_icCloseMouseExited

    private void icCloseMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_icCloseMouseEntered
        changeColor(iconClose, new Color(240, 240, 240));
    }//GEN-LAST:event_icCloseMouseEntered

    private void icCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_icCloseMouseClicked
        if (!statusPasswordInput) {
            // Jika statusPasswordInput false, tampilkan input password
            showPasswordClose();
        }
    }//GEN-LAST:event_icCloseMouseClicked

    private void bt_vcImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_vcImageMouseClicked
        String kodeVoucher = tf_vc.getText();;
        try {
            st = con.createStatement();
//            tambah field pakai ||
            if (tf_vc.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "bila anda menggunakan Voucer, data tidak boleh kosong!", "Validasi Voucer", JOptionPane.INFORMATION_MESSAGE);

            } else {
                try {
                    System.out.println("persiapan rs");
                    Connection conn = koneksi.ConfigDB.conect();
                    PreparedStatement stmt = conn.prepareStatement("SELECT * FROM voucer WHERE cd_voucer = ? AND status = 'active' AND id_users = " + this.userID);
                    stmt.setString(1, kodeVoucher);

                    ResultSet rs = stmt.executeQuery();
                    System.out.println("sementara" + rs);

                    if (rs.next()) {
                        clear();
                        updateStatusVoucher(conn, kodeVoucher);
                        try {
                            ambil();
                            String lockscreenShowApiUrl = "http://localhost:1500/api/lockscreen/show?password=" + api_f;
                            sendHttpRequest(lockscreenShowApiUrl);
                            String lockscreenExitApiUrl = "http://localhost:1500/api/lockscreen/exit?password=" + api_f;
                            sendHttpRequest(lockscreenExitApiUrl);

                        } catch (IOException ex) {
//                      Server sudah ada
                            System.out.println("server sudah ada");

                            System.out.println("sampai proses dispose >1");
                            try {
                                dispose();
                                System.out.println("dispose berhasil dijalankan");
                                Closing mainpage = new Closing(this.userID);
                                mainpage.show();
                                System.out.println("pinda halaman");
                            } catch (Exception e) {
                                System.err.println("1. dispose gagal dijalankan: " + e.getMessage());
                            }
                        }
                        try {
                            Robot robot = new Robot();

                            // Tekan tombol Alt
                            robot.keyPress(KeyEvent.VK_ALT);

                            // Tekan tombol Tab
                            robot.keyPress(KeyEvent.VK_TAB);

                            // Lepaskan tombol Tab
                            robot.keyRelease(KeyEvent.VK_TAB);

                            // Lepaskan tombol Alt
                            robot.keyRelease(KeyEvent.VK_ALT);
                            System.out.println("pindah robot 1.");
                        } catch (AWTException e) {
                            e.printStackTrace();
                            System.err.println("2. gagal dijalankan: " + e.getMessage());
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Maaf, kode tidak ditemukan atau tidak aktif", "Pesan", JOptionPane.INFORMATION_MESSAGE);
                    }

                    rs.close();
                    stmt.close();
                    conn.close();
                    System.out.println("5.");
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, "Terjadi kesalahan dalam mengakses database", "Error", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                }
            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_bt_vcImageMouseClicked

    private void bt_backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_backMouseClicked
        try {
            dispose();
            System.out.println("dispose berhasil dijalankan");
            Dashboard mainpage = new Dashboard(this.userID);
            mainpage.show();
            System.out.println("pinda halaman");
        } catch (Exception e) {
            System.err.println("1. dispose gagal dijalankan: " + e.getMessage());
        }
    }//GEN-LAST:event_bt_backMouseClicked
    void ambil() throws IOException {
        String deviceName = checkAndSaveDeviceIdentity();
        String query = "SELECT port_device FROM device WHERE name_device = ? AND id_users =" + this.userID;
        try (Connection conn = koneksi.ConfigDB.conect(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, deviceName);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                int port = rs.getInt("port_device");
                if (server == null) {
                    server = HttpServer.create(new InetSocketAddress(port), 0);
//                        server.createContext("/", new MyHandler(this.userID));
                    server.createContext("/", new MyHandler());
                    server.start();
                }
            }
            rs.close();
            stmt.close();
            conn.close();

            System.out.println("sampai proses dispose");
            try {
                dispose();
                System.out.println("dispose berhasil dijalankan");
                Closing mainpage = new Closing(this.userID);
                mainpage.show();
                System.out.println("pinda halaman");
            } catch (Exception e) {
                System.err.println("1. dispose gagal dijalankan: " + e.getMessage());
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    private void showPasswordInput() {
        JPasswordField passwordField = new JPasswordField(20);

        JPanel passwordPanel = new JPanel();
        passwordPanel.add(new JLabel("Masukkan password:"));
        passwordPanel.add(passwordField);

        // Menampilkan panel dan meminta input password
        int result = JOptionPane.showConfirmDialog(null, passwordPanel, "Konfirmasi Password", JOptionPane.OK_CANCEL_OPTION);
        statusPasswordInput = true; // Set statusPasswordInput menjadi true ketika password input aktif

        if (result == JOptionPane.OK_OPTION) {
            // Gantilah "passwordAnda" dengan password yang benar
            String passwordBenar = "admin";
            char[] inputPassword = passwordField.getPassword();

            if (new String(inputPassword).equals(passwordBenar)) {
                if (getExtendedState() != fbox.Main.MAXIMIZED_BOTH) {
                    setExtendedState(Main.MAXIMIZED_BOTH);
                } else {
                    setExtendedState(Main.NORMAL);
                }
                statusPasswordInput = false;
            } else {
                JOptionPane.showMessageDialog(null, "Password salah!", "Error", JOptionPane.ERROR_MESSAGE);
                statusPasswordInput = false;
            }
        } else if (result == JOptionPane.CANCEL_OPTION) {
            statusPasswordInput = false;
        }
    }

    private void showPasswordClose() {
        // Membuat JTextField untuk memasukkan password
        JPasswordField passwordField = new JPasswordField(20);

        // Membuat panel untuk menampilkan JTextField
        JPanel passwordPanel = new JPanel();
        passwordPanel.add(new JLabel("Masukkan password:"));
        passwordPanel.add(passwordField);

        // Menampilkan panel dan meminta input password
        int result = JOptionPane.showConfirmDialog(null, passwordPanel, "Konfirmasi Password", JOptionPane.OK_CANCEL_OPTION);
        statusPasswordInput = true; // Set statusPasswordInput menjadi true ketika password input aktif

        if (result == JOptionPane.OK_OPTION) {
            // Gantilah "passwordAnda" dengan password yang benar
            String passwordBenar = "admin";
            char[] inputPassword = passwordField.getPassword();

            // Periksa apakah password yang dimasukkan benar
            if (new String(inputPassword).equals(passwordBenar)) {
                // Jika password benar, ubah ukuran jendela

                statusPasswordInput = false;
                System.exit(0);
            } else {
                // Jika password salah, tampilkan pesan kesalahan
                JOptionPane.showMessageDialog(null, "Password salah!", "Error", JOptionPane.ERROR_MESSAGE);
                statusPasswordInput = false;
            }
        } else if (result == JOptionPane.CANCEL_OPTION) {
            statusPasswordInput = false; // Atur statusPasswordInput menjadi false
            // Tutup dialog
        }
    }

    private String ambilApiFDariDatabase(int userID, String deviceName) {
        String api_f = null;
        try {
            Connection conn = koneksi.ConfigDB.conect();
            PreparedStatement stmt = conn.prepareStatement("SELECT api_f FROM device WHERE id_users = ? AND name_device = ?");
            stmt.setInt(1, userID);
            stmt.setString(2, deviceName);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                api_f = rs.getString("api_f");
            }
            rs.close();
            stmt.close();
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return api_f;
    }

    private void sendHttpRequest(String url) {
        try {
            CloseableHttpClient httpClient = HttpClients.createDefault();
            HttpGet httpGet = new HttpGet(url);
            CloseableHttpResponse response;

            response = httpClient.execute(httpGet);
            String responseBody = EntityUtils.toString(response.getEntity());
            Progress = LocalDateTime.now().format(formatter) + "\nresponse " + responseBody;
            System.out.println("jalankan=" + Progress);

            response.close();
            httpClient.close();
        } catch (IOException | ParseException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void updateStatusVoucher(Connection conn, String kodeVoucher) throws SQLException {
        // Kode ini akan mengubah status voucher menjadi "used"
        if (!kodeVoucher.equals("admintestphomoria")) {
            PreparedStatement updateStmt = conn.prepareStatement("UPDATE voucer SET status = 'used' WHERE cd_voucer = ?");
            updateStmt.setString(1, kodeVoucher);
            updateStmt.executeUpdate();
            updateStmt.close();
        }
    }

    class MyHandler implements HttpHandler {

        private Timer timer = new Timer();
        private int hitung;
        private int sudah;

        @Override
        public void handle(HttpExchange exchange) throws IOException {
            // Ambil parameter dari permintaan
            String eventType = exchange.getRequestURI().getQuery();
            System.out.println("Received event_type: " + eventType + "----------sudah=" + sudah + "dan hitung=" + hitung);

            if (eventType != null && eventType.contains("event_type=sharing_screen")) {
                sudah = sudah + 1;
                System.out.println("==============================================" + sudah + "dan hitung=" + hitung + "====================================================");
//               JOptionPane.showMessageDialog(null, "sharing_screen"+sudah, "Validasi Voucer",JOptionPane.INFORMATION_MESSAGE);  
            }

            if (eventType != null && eventType.contains("event_type=session_end") & sudah == 2) {
                try {
                    Robot robot = new Robot();

                    // Tekan tombol Alt
                    robot.keyPress(KeyEvent.VK_ALT);

                    // Tekan tombol Tab
                    robot.keyPress(KeyEvent.VK_TAB);

                    // Lepaskan tombol Tab
                    robot.keyRelease(KeyEvent.VK_TAB);

                    // Lepaskan tombol Alt
                    robot.keyRelease(KeyEvent.VK_ALT);
                    System.out.println("pindah setelah ada nilai.");
                    System.out.println("==========================pindah=========================");
//                JOptionPane.showMessageDialog(null, "session_end"+sudah, "Validasi Voucer",JOptionPane.INFORMATION_MESSAGE);  
                    sudah = sudah + 1;
                } catch (AWTException e) {
                    e.printStackTrace();
                    System.err.println("gagal dijalankan setelah 1 menit: " + e.getMessage());
                }
            }
            if (eventType != null && eventType.contains("event_type=sharing_screen") & sudah >= 3) {
                hitung = 0;
                sudah = 1;
                System.out.println("==========================reset=========================");
//                 JOptionPane.showMessageDialog(null, "reset"+sudah, "Validasi Voucer",JOptionPane.INFORMATION_MESSAGE);
            }

            // Kirim respons kosong
            String response = "Parameters received: " + eventType;
            exchange.sendResponseHeaders(100, response.length());
            OutputStream os = exchange.getResponseBody();
            os.write(response.getBytes());
            os.close();
        }
    }

    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main(0).setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bt_back;
    private javax.swing.JLabel bt_vcImage;
    private javax.swing.JPanel header;
    private javax.swing.JLabel icClose;
    private javax.swing.JLabel icMax;
    private javax.swing.JPanel iconClose;
    private javax.swing.JPanel iconMax;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField tf_vc;
    // End of variables declaration//GEN-END:variables
}
